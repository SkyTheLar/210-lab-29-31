To test the random getName function, a driver program will
run a loop populating an array with the function outputs while
running the function on a NAMES item array. The program will
confirm that the array is full
	   
To test the timeCycle function a driver program will run
the function, saving the theoretical values of each list
in a parallel list. After the function is run the lists
be compared to the parallel list to make sure they match.
The funciton will be run and tested 10 times.

//test functions
bool timeCycleTests(map<string, array<list<string>, 3>>&, string[], string[]);
bool testGetName() {
	string output[100];
	string input[NAMES] = {"name1", "name2", "name3"};
	for (int i = 0; i < 100; i++) {
		output[i] = getName(input);
	}
	//test condition
	for (int i = 0; i < 100; i++) {
		if (output[i] == "") {
			return false;
		}
	}
	return true;
}

//time cycle function, exactly copied with only additions for tests
bool timeCycleTests(map<string, array<list<string>, 3>> &cafe, string drinks[], string names[]) {
	//beginning of interval flag
	static int counter = 1;
	cout << "Time interval " << counter << ":\n\n";

	/*************************************/
	list<string> check1, check2;
	/*************************************/
	//choose random number of drinks to be ordered
	int ordered = (rand() % MAX_OR) + 1;
	//loop for each drink
	for (int i = 0; i < ordered; i++) {
		//temp random name
		string temp = getName(names);
		//random index from drink array
		auto it = cafe.find(drinks[rand() % DRINKS]);
		if (it == cafe.end()) {
			cout << "Range error.\n";
			return false;
		}
		/*************************************/
		check1 = it->second[0];
		check1.push_back(temp);
		/*************************************/
		//add random name to map item with key from drink array
		it->second[0].push_back(temp);
		/*************************************/
		if (check1 != it->second[0])
			return false;
		/*************************************/

		//display names and drinks ordered
		cout << temp << " ordered " << it->first << endl;
	}
	cout << endl;

	//loop for each map element
	for (auto it = cafe.begin(); it != cafe.end(); it++) {
		//random number drinks to be made
		//move that many names from the front of ordered to the back of made
		cout << it->first << " was made for: ";
		/*************************************/
		check1 = it->second[0];
		check2 = it->second[1];
		/*************************************/
		for (int i = 0; i < numMade(); i++) {
			if (it->second[0].begin() != it->second[0].end()){ //if the list isn't empty
			    it->second[1].push_back(*it->second[0].begin());
			    /*************************************/
			    check2.push_back(*check1.begin());
			    check1.pop_front();
			    /*************************************/
			    //display drinks made for each drink on one line
			    cout << *it->second[0].begin() << ", ";
			    it->second[0].erase(it->second[0].begin());
			}
			/*************************************/
			if (check1 != it->second[0] || check2 !=it->second[1])
				return false;
			/*************************************/
		}
		cout << endl;
	}
	cout << endl;

	//loop for each map element
	for (auto it = cafe.begin(); it != cafe.end(); it++) {
		int toServe;
		//if made.length >= max drinks served
		if (it->second[1].size() >= MAX_SV)
			//serve that many drinks
			toServe = MAX_SV;
		else
			//serve all the drinks
			toServe = it->second[1].size();

		/*************************************/
		check1 = it->second[1];
		check2 = it->second[2];
		/*************************************/
		cout << it->first << " served to: ";
		for (int i = 0; i < toServe; i++) {
			it->second[2].push_back(*it->second[1].begin());
			/*************************************/
			check2.push_back(*check1.begin());
			check1.pop_front();
			/*************************************/
			//display drinks served for each drink on one line
		    cout << *it->second[1].begin() << ", ";
			it->second[1].erase(it->second[1].begin());
		}
		/*************************************/
		if (check1 != it->second[1] || check2 !=it->second[2])
			return false;
		/*************************************/
		cout << endl;
	}
	cout << endl;

	counter++;
	return true;
}